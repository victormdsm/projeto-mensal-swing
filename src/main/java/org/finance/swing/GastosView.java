/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.finance.swing;

import org.finance.controller.GastoController;
import org.finance.controller.TiposDeDespesaController;
import org.finance.controller.UsuarioController;
import org.finance.model.entities.GastoEntity;
import org.finance.model.entities.TiposDeDespesaEntity;

import javax.swing.*;

import java.awt.event.ActionEvent;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.List;

import static org.finance.swing.Login.userSystem;

/**
 *
 * @author Victor
 */
public class GastosView extends javax.swing.JFrame {

    private GastoController gastoController;
    private UsuarioController usuarioController;
    private DashboardView dashboardView;
    /**
     * Creates new form GastosView
     */
    public GastosView() {
        gastoController = new GastoController();
        usuarioController = new UsuarioController();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listarButton = new javax.swing.JButton();
        adicionarButton = new javax.swing.JButton();
        atualizarButton = new javax.swing.JButton();
        excluirButton = new javax.swing.JButton();
        gastoCategoriaButton = new javax.swing.JButton();
        voltarButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        listarButton.setContentAreaFilled(false);
        listarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarButtonActionPerformed(evt);
            }
        });
        getContentPane().add(listarButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 103, 250, 50));

        adicionarButton.setContentAreaFilled(false);
        adicionarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarButtonActionPerformed(evt);
            }
        });
        getContentPane().add(adicionarButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 183, 240, 50));

        atualizarButton.setContentAreaFilled(false);
        atualizarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarButtonActionPerformed(evt);
            }
        });
        getContentPane().add(atualizarButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 263, 240, 50));

        excluirButton.setContentAreaFilled(false);
        excluirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirButtonActionPerformed(evt);
            }
        });
        getContentPane().add(excluirButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 343, 250, 50));

        gastoCategoriaButton.setContentAreaFilled(false);
        gastoCategoriaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gastoCategoriaButtonActionPerformed(evt);
            }
        });
        getContentPane().add(gastoCategoriaButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 423, 250, 50));

        voltarButton.setContentAreaFilled(false);
        voltarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltarButtonActionPerformed(evt);
            }
        });
        getContentPane().add(voltarButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 510, 190, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gastos.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void atualizarButtonActionPerformed(ActionEvent evt) {
        GastoController gastoController = new GastoController();

        List<GastoEntity> gastos = gastoController.getGastos(userSystem.getId());

        if (gastos == null || gastos.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Você ainda não possui gastos cadastrados.", "Gastos", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        StringBuilder mensagem = new StringBuilder("Selecione o gasto que deseja atualizar:\n");
        for (GastoEntity gasto : gastos) {
            mensagem.append("- ID: ").append(gasto.getId())
                    .append(", Valor: ").append(gasto.getValor())
                    .append(", Data: ").append(gasto.getDiaDoGasto())
                    .append(", Categoria: ").append(gasto.getTiposDeDespesa().getNomeDaDespesa())
                    .append("\n");
        }

        String input = JOptionPane.showInputDialog(this, mensagem.toString(), "Selecione um Gasto", JOptionPane.QUESTION_MESSAGE);

        if (input == null || input.isEmpty()) {
            return;
        }

        Long gastoId = Long.valueOf(input);


        GastoEntity gasto = gastoController.findById(gastoId);

        if (gasto == null) {
            JOptionPane.showMessageDialog(this, "Gasto não encontrado.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        BigDecimal novoValor = new BigDecimal(JOptionPane.showInputDialog(this, "Digite o novo valor:", "Novo Valor", JOptionPane.QUESTION_MESSAGE));
        LocalDate novaData = LocalDate.parse(JOptionPane.showInputDialog(this, "Digite a nova data (YYYY-MM-DD):", "Nova Data", JOptionPane.QUESTION_MESSAGE));

        gasto.setValor(novoValor);
        gasto.setDiaDoGasto(novaData);
        gastoController.update(gasto);
        dashboardView.atualizarValorTotal();
        JOptionPane.showMessageDialog(this, "Gasto atualizado com sucesso.", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
    }

    private void gastoCategoriaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gastoCategoriaButtonActionPerformed
        TiposDeDespesaController tiposDeDespesaController = new TiposDeDespesaController();

        List<TiposDeDespesaEntity> categorias = tiposDeDespesaController.getAllTipos(userSystem.getId());

        if (categorias == null || categorias.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Você ainda não possui categorias de despesa cadastradas.", "Categorias de Despesa", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        StringBuilder mensagem = new StringBuilder("Selecione uma categoria de despesa:\n");
        for (TiposDeDespesaEntity categoria : categorias) {
            mensagem.append("- ").append(categoria.getId()).append(": ").append(categoria.getNomeDaDespesa()).append("\n");
        }

        String input = JOptionPane.showInputDialog(this, mensagem.toString(), "Selecione uma Categoria", JOptionPane.QUESTION_MESSAGE);
        if (input == null || input.isEmpty()) {
            return;
        }

        Long categoriaId = Long.valueOf(input);
        BigDecimal valorTotal = gastoController.valorTotalCategoria(categoriaId);
        JOptionPane.showMessageDialog(this, "Valor total gasto na categoria " + categoriaId + ": " + valorTotal, "Valor Total Gasto", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_gastoCategoriaButtonActionPerformed

    private void excluirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirButtonActionPerformed

        if (userSystem.getGastos() == null || userSystem.getGastos().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Você não possui gastos para excluir.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        StringBuilder gastos = new StringBuilder("Gastos disponíveis para exclusão:\n");
        for (GastoEntity gasto : userSystem.getGastos()) {
            gastos.append("- ID: ").append(gasto.getId())
                    .append(", Valor: ").append(gasto.getValor())
                    .append(", Dia do Gasto: ").append(gasto.getDiaDoGasto())
                    .append(", Categoria: ").append(gasto.getTiposDeDespesa().getNomeDaDespesa())
                    .append("\n");
        }

        String gastoIdString = JOptionPane.showInputDialog(this, gastos.toString() + "\nDigite o ID do gasto que deseja excluir:");

        try {
            Long gastoId = Long.parseLong(gastoIdString);

            GastoEntity gastoParaExcluir = gastoController.findById(gastoId);

            if (gastoParaExcluir != null) {

                int confirmacao = JOptionPane.showConfirmDialog(this, "Tem certeza de que deseja excluir o seguinte gasto?\n\n" +
                        "ID: " + gastoParaExcluir.getId() + "\n" +
                        "Valor: " + gastoParaExcluir.getValor() + "\n" +
                        "Dia do Gasto: " + gastoParaExcluir.getDiaDoGasto() + "\n" +
                        "Categoria: " + gastoParaExcluir.getTiposDeDespesa().getNomeDaDespesa(), "Confirmar Exclusão", JOptionPane.YES_NO_OPTION);

                if (confirmacao == JOptionPane.YES_OPTION) {
                    gastoController.delete(gastoParaExcluir);
                    dashboardView.atualizarValorTotal();
                    JOptionPane.showMessageDialog(this, "Gasto excluído com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Exclusão cancelada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Gasto não encontrado.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "ID do gasto inválido. Certifique-se de inserir um número válido.", "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erro ao excluir gasto: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_excluirButtonActionPerformed

    private void listarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarButtonActionPerformed
        if (userSystem.getGastos() != null && !userSystem.getGastos().isEmpty()) {
            StringBuilder mensagem = new StringBuilder("Lista de gastos:\n");
            for (GastoEntity gasto : userSystem.getGastos()) {
                mensagem.append("- ID: ").append(gasto.getId())
                        .append(", Valor: ").append(gasto.getValor())
                        .append(", Dia do Gasto: ").append(gasto.getDiaDoGasto())
                        .append(", Categoria: ").append(gasto.getTiposDeDespesa().getNomeDaDespesa())
                        .append("\n");
            }
            JOptionPane.showMessageDialog(this, mensagem.toString(), "Gastos", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "A lista de gastos está vazia.", "Lista Vazia", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_listarButtonActionPerformed

    private void adicionarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarButtonActionPerformed

        if (userSystem.getTiposDeDespesaEntities() == null || userSystem.getTiposDeDespesaEntities().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Você não possui categorias de despesa disponíveis. Adicione categorias antes de adicionar gastos.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        StringBuilder categorias = new StringBuilder("Categorias disponíveis:\n");
        for (TiposDeDespesaEntity categoria : userSystem.getTiposDeDespesaEntities()) {
            categorias.append("- ID: ").append(categoria.getId()).append(", Nome: ").append(categoria.getNomeDaDespesa()).append("\n");
        }

        String categoriaIdString = JOptionPane.showInputDialog(this, categorias.toString() + "\nDigite o ID da categoria do gasto:");

        try {
            Long categoriaId = Long.parseLong(categoriaIdString);

            TiposDeDespesaEntity categoria = null;
            for (TiposDeDespesaEntity c : userSystem.getTiposDeDespesaEntities()) {
                if (c.getId().equals(categoriaId)) {
                    categoria = c;
                    break;
                }
            }

            if (categoria != null) {
                String valorString = JOptionPane.showInputDialog(this, "Digite o valor do gasto:");
                String dataString = JOptionPane.showInputDialog(this, "Digite a data do gasto (no formato YYYY-MM-DD):");

                BigDecimal valor = new BigDecimal(valorString);
                LocalDate data = LocalDate.parse(dataString);

                GastoEntity novoGasto = new GastoEntity(valor, data, userSystem, categoria);
                gastoController.creat(novoGasto);
                dashboardView.atualizarValorTotal();
                JOptionPane.showMessageDialog(this, "Gasto adicionado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Categoria não encontrada.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException | DateTimeParseException ex) {
            JOptionPane.showMessageDialog(this, "Dados inválidos. Certifique-se de inserir um valor numérico para o valor do gasto e usar o formato correto para a data (YYYY-MM-DD).", "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erro ao adicionar gasto: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_adicionarButtonActionPerformed



    private void voltarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltarButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_voltarButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GastosView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GastosView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GastosView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GastosView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GastosView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adicionarButton;
    private javax.swing.JButton atualizarButton;
    private javax.swing.JButton excluirButton;
    private javax.swing.JButton gastoCategoriaButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton listarButton;
    private javax.swing.JButton voltarButton;

    public void setDashboardView(DashboardView dashboardView) {
        this.dashboardView = dashboardView;
    }
    // End of variables declaration//GEN-END:variables
}
